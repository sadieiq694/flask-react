{"version":3,"sources":["components/ForceGraphClass.js","components/CheckboxPractice.js","App.js","reportWebVitals.js","components/rechart-components/SingleLineChart.js","components/rechart-components/EventChart.js","Metrics.js","index.js"],"names":["imgScale","d3","domain","range","edgeColorScale","ForceGraphClass","createGraph","width","links","props","map","d","Object","assign","nodes","drag","simulation","subject","event","find","x","y","on","active","alphaTarget","restart","fx","fy","force","id","strength","svg","attr","link","append","style","selectAll","data","join","type","text","enter","name","call","img","group","legend_g","i","legend_g2","source","target","destroy","stop","node","this","remove","console","log","React","Component","CheckboxPractice","state","options","onChange","bind","e","index","checked","value","push","indexOf","splice","setState","nodeData","edges","linksData","top_resources","serv_resources","filtered_nodes","filter","item","includes","verts","a","filtered_edges","height","App","graphData","fetchData","fetch","then","resp","json","catch","error","className","onClick","fetchTest","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","SingleLineChart","brush","syncId","syncID","margin","top","right","left","bottom","strokeDasharray","dataKey","xDataKey","xLabel","position","yDataKey","yLabel","angle","stroke","fill","PureComponent","CustomTooltip","scaleOrdinal","schemeCategory10","payload","label","message","reason","object","Example","unit","cursor","content","jsfiddleUrl","unique","self","MetricPlots","opsData","memoryData","eventData","latencyData","cpuData","errorData","ops","memory","latency","cpu","u_mem_resource","resource_id","mem_data_1","parseInt","mem_data_2","activeDot","r","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"js/main.76058f7c.chunk.js","sourcesContent":["import * as d3 from \"d3\";\r\nimport React from 'react'\r\n//import \"@fortawesome/fontawesome-free/css/all.min.css\";\r\n//import styles from \"./forceGraph.module.css\";\r\n\r\n\r\nconst imgScale = d3.scaleOrdinal() //=d3.scaleOrdinal(d3.schemeSet2)\r\n    .domain([\"node\", \"container\", \"pod\", \"service\", \"deployment\"])\r\n    .range(['https://cdn2.iconfinder.com/data/icons/mixd/512/21_kubernetes-512.png', 'https://cdn4.iconfinder.com/data/icons/vectory-symbols/40/hexagon-512.png', 'https://image.flaticon.com/icons/svg/73/73326.svg','https://static.thenounproject.com/png/32460-200.png', 'https://cdn1.iconfinder.com/data/icons/materia-arrows-symbols-vol-9/24/018_343_insignia_badge_shape_triangle-512.png'])\r\n\r\nconst edgeColorScale = d3.scaleOrdinal() //=d3.scaleOrdinal(d3.schemeSet2)\r\n    .domain([\"scheduled on\", \"runs\", \"references\", \"targets\", \"calls\", \"owns\", \"backs\", \"points to\"])\r\n    .range(['red', 'black', 'blue','pink','green','brown','yellow','orange'])\r\n\r\nclass ForceGraphClass extends React.Component{\r\n    componentDidMount(){\r\n        this.createGraph();\r\n    }\r\n    componentDidUpdate(){\r\n        var svg = d3.select('svg');\r\n        svg.selectAll(\"*\").remove();\r\n        this.createGraph(); \r\n    }\r\n\r\n    createGraph = ()=>{\r\n        const width = 1000;\r\n        const height = 400; \r\n        var links = this.props.links.map((d) => Object.assign({}, d));\r\n        var nodes = this.props.nodes.map((d) => Object.assign({}, d));\r\n\r\n\r\n        const drag = (simulation) => {\r\n            function dragsubject(event) {\r\n              return simulation.find(event.x, event.y);\r\n            }\r\n          \r\n            const dragstarted = (d) => {\r\n              if (!d.active) simulation.alphaTarget(0.3).restart();\r\n              d.subject.fx = d.subject.x;\r\n              d.subject.fy = d.subject.y;\r\n            }\r\n            \r\n            const dragged = (d) => {\r\n              d.subject.fx = d.x;\r\n              d.subject.fy = d.y;\r\n            }\r\n            \r\n            const dragended = (d) => {\r\n              if (!d.active) simulation.alphaTarget(0);\r\n              d.subject.fx = null;\r\n              d.subject.fy = null;\r\n            }\r\n            \r\n            return d3.drag()\r\n                .subject(dragsubject)\r\n                .on(\"start\", dragstarted)\r\n                .on(\"drag\", dragged)\r\n                .on(\"end\", dragended);\r\n          }\r\n\r\n        const simulation = d3\r\n            .forceSimulation(nodes)\r\n            .force(\"link\", d3.forceLink(links).id(d => d.id))\r\n            .force(\"charge\", d3.forceManyBody().strength(-200))\r\n            .force(\"x\", d3.forceX())\r\n            .force(\"y\", d3.forceY());\r\n\r\n\r\n        var svg = d3\r\n            .select('svg')\r\n            //.append(\"svg\")\r\n            .attr(\"viewBox\", [-width/2, -height/2, width, height]);\r\n\r\n        const def = svg.append('defs').append('marker')\r\n            .attr(\"id\",'arrowhead')\r\n            .attr('viewBox','-0 -5 10 10') //the bound of the SVG viewport for the current SVG fragment. defines a coordinate system 10 wide and 10 high starting on (0,-5)\r\n            .attr('refX',23) // x coordinate for the reference point of the marker. If circle is bigger, this need to be bigger.\r\n            .attr('refY',0)\r\n            .attr('orient','auto')\r\n            .attr('markerWidth', 4)\r\n            .attr('markerHeight', 4)\r\n            .attr('xoverflow','visible')\r\n            .append('svg:path')\r\n            .attr('d', 'M 0,-5 L 10 ,0 L 0,5')\r\n            .attr('fill', 'black')\r\n            .style('stroke','none');\r\n\r\n        const link = svg\r\n            .append(\"g\")\r\n            .attr(\"stroke\", \"#999\")\r\n            .attr(\"stroke-opacity\", 0.6)\r\n            .selectAll(\"line\")\r\n            .data(links)\r\n            .join(\"line\")\r\n            .style(\"stroke\", d => edgeColorScale(d.type))\r\n            .attr(\"stroke-width\",3)\r\n            .attr('marker-end','url(#arrowhead)');\r\n        \r\n        const text = svg.append(\"g\") // deleting this gets rid of images \r\n            .attr(\"class\", \"text\")\r\n            .selectAll(\"text\")\r\n            .data(nodes)\r\n            .enter().append(\"text\")\r\n            .attr(\"font-family\", \"sans-serif\")\r\n            .attr(\"font-size\", 15)\r\n            .text(d => d.name)\r\n            .call(drag(simulation));;\r\n\r\n        const img = svg.append(\"g\")\r\n            .attr(\"class\", \"image\")\r\n            .selectAll(\"image\")\r\n            .data(nodes)\r\n            .enter().append(\"image\")\r\n            .attr(\"xlink:href\",d => imgScale(d.group) )\r\n            .attr(\"width\", 30)\r\n            .attr(\"height\", 30)\r\n            //.on(\"click\", clickNode)\r\n            .call(drag(simulation));\r\n\r\n          const legend_g = svg.selectAll(\".legend\")\r\n              .data(imgScale.domain())\r\n              .enter().append(\"g\") \r\n              .attr(\"transform\", (d, i) => `translate(${width-650},${ -50 + i * 25})`); \r\n        \r\n          legend_g.append(\"image\")\r\n              .attr(\"xlink:href\",imgScale )\r\n              .attr(\"width\", 20)\r\n              .attr(\"height\", 20);\r\n        \r\n          legend_g.append(\"text\")\r\n              .attr(\"x\", 25)\r\n              .attr(\"y\", 20)\r\n              .text(d => d);\r\n          \r\n          const legend_g2 = svg.selectAll(\".legend\")\r\n              .data(edgeColorScale.domain())\r\n              .enter().append(\"g\") \r\n              .attr(\"transform\", (d, i) => `translate(${width-640},${100+ i * 20})`); \r\n        \r\n          legend_g2.append(\"circle\")\r\n              .attr(\"cx\", 0)\r\n              .attr(\"cy\", 0)\r\n              .attr(\"r\", 5)\r\n              .attr(\"fill\", edgeColorScale);\r\n            \r\n          legend_g2.append(\"text\")\r\n              .attr(\"x\", 10)\r\n              .attr(\"y\", 5)\r\n              .text(d => d);\r\n\r\n        simulation.on(\"tick\", () => {\r\n            //update link positions\r\n            link\r\n                .attr(\"x1\", d => d.source.x)\r\n                .attr(\"y1\", d => d.source.y)\r\n                .attr(\"x2\", d => d.target.x)\r\n                .attr(\"y2\", d => d.target.y);\r\n        \r\n            img\r\n                .attr(\"x\", d => d.x-15) //position of the lower left point of the text\r\n                .attr(\"y\", d => d.y-15); //position of the lower left point of the text\r\n            text\r\n                .attr(\"x\", d => d.x + 15) //position of the lower left point of the text\r\n                .attr(\"y\", d => d.y + 5); //position of the lower left point of the text\r\n\r\n            });\r\n        \r\n\r\n        return {\r\n            destroy: () => {\r\n                //d3.select(svg).remove()\r\n                //link.exit().remove()\r\n                //img.exit().remove();\r\n                simulation.stop();\r\n            },\r\n            nodes: () => {\r\n                return svg.node();\r\n            }\r\n        };\r\n \r\n    }\r\n\r\n    \r\n\r\n    render(){\r\n        console.log(this.props.data)\r\n        return(\r\n            <svg>\r\n\r\n            </svg>\r\n        );\r\n    }\r\n\r\n} \r\n\r\nexport default ForceGraphClass\r\n\r\n/*\r\nrunForceGraph(\r\n  container,\r\n  linksData,\r\n  nodeData,\r\n) {\r\n  console.log(\"IN GRAPHGENERATOR\", nodeData)\r\n  const links = linksData.map((d) => Object.assign({}, d));\r\n  const nodes = nodeData.map((d) => Object.assign({}, d));\r\n\r\n  const containerRect = container.getBoundingClientRect();\r\n  const height = containerRect.height;\r\n  const width = containerRect.width;\r\n\r\n  const color = () => { return \"#9D79A0\"; };\r\n\r\n\r\n\r\n\r\n  const link = svg\r\n    .append(\"g\")\r\n    .attr(\"stroke\", \"#999\")\r\n    .attr(\"stroke-opacity\", 0.6)\r\n    .selectAll(\"line\")\r\n    .data(links)\r\n    .join(\"line\")\r\n    .style(\"stroke\", d => edgeColorScale(d.type))\r\n    .attr(\"stroke-width\",3)\r\n    .attr('marker-end','url(#arrowhead)');\r\n    \r\n  const node = svg.append(\"g\")\r\n    .attr(\"stroke\", \"#fff\")\r\n    .attr(\"stroke-width\", 1.5)\r\n    .selectAll(\"circle\")\r\n    .data(nodes)\r\n    .join(\"circle\")\r\n    .attr(\"r\",5)\r\n    // .style(\"fill\", d => colorScale(d.group))\r\n    .style(\"fill\", \"#ffffff\");\r\n\r\n  const img = svg.append(\"g\")\r\n    .attr(\"class\", \"image\")\r\n    .selectAll(\"image\")\r\n    .data(nodes)\r\n    .enter().append(\"image\")\r\n    .attr(\"xlink:href\",d => imgScale(d.group) )\r\n    .attr(\"width\", 30)\r\n    .attr(\"height\", 30)\r\n    //.on(\"click\", clickNode)\r\n    .call(drag(simulation));\r\n\r\n  /*const label = svg.append(\"g\")\r\n    .attr(\"class\", \"labels\")\r\n    .selectAll(\"text\")\r\n    .data(nodes)\r\n    .enter()\r\n    .append(\"text\")\r\n    .attr('text-anchor', 'middle')\r\n    .attr('dominant-baseline', 'central')\r\n    .attr(\"class\", d => `fa ${getClass(d)}`)\r\n    .text(d => {return icon(d);})\r\n    .call(drag(simulation));\r\n\r\n  const text = svg.append(\"g\") // deleting this gets rid of images \r\n    .attr(\"class\", \"text\")\r\n    .selectAll(\"text\")\r\n    .data(nodes)\r\n    .enter().append(\"text\")\r\n    .attr(\"font-family\", \"sans-serif\")\r\n    .attr(\"font-size\", 15)\r\n    .text(d => d.name)\r\n    .call(drag(simulation));;\r\n\r\n\r\n  label.on(\"mouseover\", (d) => {\r\n    addTooltip(nodeHoverTooltip, d, d3.event.pageX, d3.event.pageY);\r\n  })\r\n    .on(\"mouseout\", () => {\r\n      removeTooltip();\r\n    });\r\n\r\n  simulation.on(\"tick\", () => {\r\n    //update link positions\r\n    link\r\n      .attr(\"x1\", d => d.source.x)\r\n      .attr(\"y1\", d => d.source.y)\r\n      .attr(\"x2\", d => d.target.x)\r\n      .attr(\"y2\", d => d.target.y);\r\n\r\n    // update node positions\r\n    node\r\n      .attr(\"cx\", d => d.x)\r\n      .attr(\"cy\", d => d.y);\r\n    img\r\n      .attr(\"x\", d => d.x-15) //position of the lower left point of the text\r\n      .attr(\"y\", d => d.y-15); //position of the lower left point of the text\r\n\r\n    text\r\n      .attr(\"x\", d => d.x + 15) //position of the lower left point of the text\r\n      .attr(\"y\", d => d.y + 5); //position of the lower left point of the text\r\n  });\r\n\r\n  const legend_g = svg.selectAll(\".legend\")\r\n    .data(imgScale.domain())\r\n    .enter().append(\"g\") \r\n    .attr(\"transform\", (d, i) => `translate(${width-600},${ -50 + i * 25})`); \r\n\r\n  legend_g.append(\"image\")\r\n        .attr(\"xlink:href\",imgScale )\r\n        .attr(\"width\", 20)\r\n      .attr(\"height\", 20);\r\n\r\n  legend_g.append(\"text\")\r\n    .attr(\"x\", 25)\r\n    .attr(\"y\", 20)\r\n    .text(d => d);\r\n  \r\n  const legend_g2 = svg.selectAll(\".legend\")\r\n    .data(edgeColorScale.domain())\r\n    .enter().append(\"g\") \r\n    .attr(\"transform\", (d, i) => `translate(${width-590},${100+ i * 20})`); \r\n\r\n  legend_g2.append(\"circle\")\r\n    .attr(\"cx\", 0)\r\n    .attr(\"cy\", 0)\r\n    .attr(\"r\", 5)\r\n    .attr(\"fill\", edgeColorScale);\r\n    \r\n  legend_g2.append(\"text\")\r\n    .attr(\"x\", 10)\r\n    .attr(\"y\", 5)\r\n    .text(d => d);\r\n\r\n  return {\r\n    destroy: () => {\r\n      simulation.stop();\r\n    },\r\n    nodes: () => {\r\n      return svg.node();\r\n    }\r\n  };\r\n}\r\n*/","import React from 'react'\r\n//import { ForceGraph } from \"./ForceGraph.js\";\r\nimport ForceGraphClass from \"./ForceGraphClass.js\"\r\n\r\n\r\nclass CheckboxPractice extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        options: []\r\n      };\r\n      \r\n      this.onChange = this.onChange.bind(this)\r\n  \r\n      //this.handleInputChange = this.handleInputChange.bind(this);\r\n    };\r\n\r\n    onChange(e) {\r\n        // current array of options\r\n        const options = this.state.options\r\n        let index\r\n    \r\n        // check if the check box is checked or unchecked\r\n        if (e.target.checked) {\r\n          // add the numerical value of the checkbox to options array\r\n          console.log(e.target.value, typeof(e.target.value))\r\n          options.push(e.target.value)\r\n        } else {\r\n          // or remove the value from the unchecked checkbox from the array\r\n          index = options.indexOf(e.target.value)\r\n          options.splice(index, 1)\r\n        }\r\n    \r\n        // update the state with the new array of options\r\n        this.setState({ options: options })\r\n      }\r\n\r\n    render() {\r\n        var nodes = this.props.nodeData;\r\n        var edges = this.props.linksData;\r\n        //console.log(\"Edge example:\", edges[0])\r\n        var top_resources = [\"pod\", \"node\", \"container\"]\r\n        var serv_resources = [\"deployment\", \"pod\", \"service\"]\r\n        //console.log(\"One node:\", nodes[1])\r\n        var filtered_nodes = nodes.filter( item => { \r\n            return ( ((this.state.options.includes(item['group']) || \r\n            this.state.options.includes('all'))) || \r\n            (this.state.options.includes('topology') && top_resources.includes(item['group']) ) || \r\n            (this.state.options.includes('call graph') && serv_resources.includes(item['group']) ))\r\n            });\r\n\r\n        var verts = filtered_nodes.map(a => a.id);\r\n\r\n        var filtered_edges = edges.filter( item => {\r\n            return (verts.includes(item['source']) && verts.includes(item['target']))\r\n        })\r\n        //console.log(\"filtered nodes\", filtered_nodes, \"filtered edges\", filtered_edges )\r\n        var listItems = filtered_nodes.map((node) => <li>{node.name}</li>);\r\n\r\n      //console.log(this.state.options)\r\n      return (\r\n        <div>\r\n        <form>\r\n          <label>\r\n            Pods: <input name=\"pods\" type=\"checkbox\" value=\"pod\" onChange={this.onChange} />\r\n          </label>\r\n          <br />\r\n          <label>\r\n            Nodes: <input name=\"nodes\" type=\"checkbox\" value=\"node\" onChange={this.onChange} />\r\n          </label>\r\n          <br />\r\n          <label>\r\n            Containers: <input name=\"containers\" type=\"checkbox\" value=\"container\" onChange={this.onChange} />\r\n          </label>\r\n          <br />\r\n          <label>\r\n            Services: <input name=\"services\" type=\"checkbox\" value=\"service\" onChange={this.onChange} />\r\n          </label>\r\n          <br />\r\n          <label>\r\n            Deployments: <input name=\"deployments\" type=\"checkbox\" value=\"deployment\" onChange={this.onChange} />\r\n          </label>\r\n        </form>\r\n        <ForceGraphClass height={500} width={500} links={filtered_edges} nodes={filtered_nodes}/> \r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  //        <ForceGraph linksData={filtered_edges} nodesData={filtered_nodes}/>\r\n\r\n\r\nexport default CheckboxPractice","import React, {useState, useEffect} from 'react';\n//import { ForceGraph } from \"./components/ForceGraph.js\";\nimport CheckboxPractice from \"./components/CheckboxPractice.js\"\n\nclass App extends React.Component {\n  state = {\n    graphData: {\"nodes\":[], \"edges\":[]}\n  };\n\n  // add button to re-update data from database\n  //async\n  componentDidMount() {\n    //const response = await fetch('/data/graph');\n    //const data = await response.json(); \n    //this.setState({graphData: data});\n    //console.log(\"graph data: \", this.state.graphData)\n    this.fetchData();\n  }\n\n  fetchData = () => {\n    fetch('/data/graph').then((resp) => {\n      return resp.json()\n    }).then((data) => {\n      this.setState({graphData: data})\n    }).catch((error) => {\n      console.log(error, \"FETCH FAILED!\")\n    })\n  }\n\n  render() {\n    console.log(this.state.graphData.nodes)\n    return (\n      <div className=\"App\">\n        <button onClick={this.fetchTest}>Test data fetching</button>\n        <button onClick={this.fetchData}>Refresh Graph Data</button> \n        <header className=\"App-header\">\n        <CheckboxPractice nodeData={this.state.graphData.nodes} linksData={this.state.graphData.edges}/>\n        </header>\n      </div>\n    );\n\n  }\n  \n}\n\n//                 <CheckboxPractice nodeData={this.graphData.nodes} linksData={this.graphData.edges}/>\n// <CheckboxPractice nodeData={nodes} linksData={edges}/>\n\n// <Example />         <DisplayNodeNames nodeData={nodes}/>\n\n\n\n/*\n  <CPUGraph data={cpu} />\n  <MemGraph data={memory} />\n  <ErrorGraph data={error} />\n  <LatencyGraph data={latency} />\n  <OpsGraph data={ops} />\n  <EventGraph data={events} />\n*/\n\n//         <p>My token: {window.token}</p>\n//         <ForceGraph linksData={edges} nodesData={nodes}/>\n//         <EventGraph data={eventData} />\n//         <D3Bar width={500} height={500} data={barData}/>\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { PureComponent } from 'react';\r\nimport {\r\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Brush,\r\n  AreaChart, Area, Label,\r\n} from 'recharts';\r\n\r\nclass SingleLineChart extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        /* Props:\r\n            data\r\n            width\r\n            height\r\n            syncID\r\n            xDataKey\r\n            yDataKey\r\n            xLabel\r\n            yLabel\r\n            brush (true/false)\r\n        */\r\n      };\r\n\r\n    render() {\r\n        let brush; \r\n        if(this.props.brush) {\r\n            brush = <Brush />;\r\n        } else {\r\n            brush = <div></div>;\r\n        }\r\n        return (\r\n        <LineChart\r\n          width={this.props.width}\r\n          height={this.props.height}\r\n          data={this.props.data}\r\n          syncId={this.props.syncID}\r\n          margin={{\r\n            top: 10, right: 30, left: 20, bottom: 20,\r\n          }}\r\n        >\r\n\t\t  {brush}\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey={this.props.xDataKey}>\r\n\t\t\t  <Label value={this.props.xLabel} position=\"bottom\"/>\r\n\t\t  </XAxis>\r\n          <YAxis dataKey={this.props.yDataKey}>\r\n              <Label value={this.props.yLabel} angle={-90} position='left'/>\r\n          </YAxis> \r\n          <Tooltip />\r\n          <Line type=\"monotone\" dataKey={this.props.yDataKey} stroke=\"#8884d8\" fill=\"#8884d8\" />\r\n        </LineChart>)\r\n    }\r\n}\r\n\r\nexport default SingleLineChart\r\n","import React, { PureComponent } from 'react';\r\nimport {\r\n  ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, Tooltip, Cell\r\n} from 'recharts';\r\nimport { scaleOrdinal } from 'd3-scale';\r\nimport { schemeCategory10 } from 'd3-scale-chromatic';\r\n\r\nconst colors = scaleOrdinal(schemeCategory10).range();\r\n\r\nconst data = [\r\n  { x: 100, y: 200, z: 200 },\r\n  { x: 120, y: 100, z: 260 },\r\n  { x: 170, y: 300, z: 400 },\r\n  { x: 140, y: 250, z: 280 },\r\n  { x: 150, y: 400, z: 500 },\r\n  { x: 110, y: 280, z: 200 },\r\n];\r\n\r\nconst CustomTooltip = ({ active, payload, label }) => {\r\n    if (active) {\r\n      console.log(payload, label)\r\n      return (\r\n        <div className=\"custom-tooltip\">\r\n          <p className=\"mess\">{`Message : ${payload[0].payload.message}`}</p>\r\n          <p className=\"reason\">{`reason : ${payload[0].payload.reason}`}</p>\r\n          <p className=\"obj\">{`object : ${payload[0].payload.object}`}</p>\r\n        </div>\r\n      );\r\n    }\r\n  \r\n    return null;\r\n  };\r\n\r\nexport default class Example extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    /* Props:\r\n        data\r\n        width\r\n        height\r\n        syncID\r\n        xDataKey\r\n        yDataKey\r\n        xLabel\r\n        yLabel\r\n        brush (true/false)\r\n    */\r\n  };\r\n\r\n  static jsfiddleUrl = 'https://jsfiddle.net/alidingling/9Lfxjjty/';\r\n\r\n  render() {\r\n    return (\r\n      <ScatterChart\r\n        width={this.props.width}\r\n        height={this.props.height}\r\n        syncId={this.props.syncID}\r\n        margin={{\r\n          top: 20, right: 20, bottom: 20, left: 20,\r\n        }}\r\n      >\r\n        <CartesianGrid />\r\n        <XAxis type=\"number\" dataKey={this.props.xDataKey} name={this.props.xLabel} unit=\"s\" domain={['dataMin', 'dataMax']} />\r\n        <YAxis type=\"category\" dataKey={this.props.yDataKey} name={this.props.yLabel} />\r\n        <Tooltip cursor={{ strokeDasharray: '3 3' }} content={<CustomTooltip />} />\r\n        <Scatter name=\"Events\" data={this.props.data} fill=\"#8884d8\"></Scatter>\r\n      </ScatterChart>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\nimport {\r\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Brush,\r\n  AreaChart, Area, Label,\r\n  ScatterChart, Scatter, Cell\r\n} from 'recharts';\r\nimport SingleLineChart from './components/rechart-components/SingleLineChart.js';\r\nimport EventChart from './components/rechart-components/EventChart.js';\r\n\r\nconst unique = (value, index, self) => {\r\n\treturn self.indexOf(value) == index\r\n}\r\n\r\nconst data = [\r\n\t{name: 'Page A', uv: 4000,  amt: 2400},\r\n\t{name: 'Page B', uv: 3000, amt: 2210},\r\n\t{name: 'Page C', uv: 2000, amt: 2290},\r\n\t{name: 'Page D', uv: 2780,  amt: 2000},\r\n\t{name: 'Page E', uv: 1890,  amt: 2181},\r\n];\r\nconst data2 = [\r\n\t{name: 'Page A',  pv: 2400, amt: 2400},\r\n\t{name: 'Page B', pv: 1398, amt: 2210},\r\n\t{name: 'Page C',  pv: 9800, amt: 2290},\r\n\t{name: 'Page D', pv: 3908, amt: 2000},\r\n];\r\n\r\nclass MetricPlots extends PureComponent {\r\n  static jsfiddleUrl = 'https://jsfiddle.net/alidingling/nskpgcrz/';\r\n\r\n  state = {\r\n    opsData: [],\r\n    memoryData: [],\r\n    eventData: [],\r\n    latencyData: [],\r\n    cpuData: [],\r\n    errorData: [],\r\n  };\r\n\r\n  //async \r\n  componentDidMount() {\r\n    //const response = await fetch('/data/metric');\r\n    //const data = await response.json(); \r\n    //this.setState({opsData: data.ops, memoryData: data.memory, eventData: data.event, errorData: data.error, latencyData: data.latency, cpuData: data.cpu });\r\n    //console.log(\"graph data: \", this.state.opsData)\r\n    this.fetchData();\r\n  }\r\n\r\n  fetchData = () => {\r\n    fetch('/data/metric').then((resp) => {\r\n      return resp.json()\r\n    }).then((data) => {\r\n      this.setState({opsData: data.ops, memoryData: data.memory, eventData: data.event, errorData: data.error, latencyData: data.latency, cpuData: data.cpu })\r\n    }).catch((error) => {\r\n      console.log(error, \"FETCH FAILED!\")\r\n    })\r\n  }\r\n\r\n  render() {\r\n    var mem_resources = this.state.memoryData.map(a => a.resource_id)\r\n    var u_mem_resource = mem_resources.filter(unique)\r\n    console.log(u_mem_resource)\r\n\r\n    var mem_data_1  = this.state.memoryData.filter( item => {\r\n      return item[\"resource_id\"] == \"details-v1-6c9f8bcbcb-crqvr/details\"\r\n      });\r\n\r\n    for(var i in mem_data_1) {\r\n      mem_data_1[i].memory = parseInt(mem_data_1[i].memory)\r\n    }\r\n\r\n    var mem_data_2  = this.state.memoryData.filter( item => {\r\n      return item[\"resource_id\"] == \"productpage-v1-7df7cb7f86-5pdhd/productpage\"\r\n      });\r\n\r\n    for(var i in mem_data_2) {\r\n      mem_data_2[i].memory = parseInt(mem_data_2[i].memory)\r\n    }\r\n    return (\r\n      <div>\r\n        <button onClick={this.fetchData}>Refresh Metric Data</button> \r\n        <h4>Metric Plots</h4>\r\n        <EventChart\r\n          data={this.state.eventData}\r\n          width={1000} \r\n          height={200}\r\n          syncID=\"anyID\"\r\n                xDataKey=\"time\"\r\n                yDataKey=\"reason\"\r\n                xLabel=\"time\"\r\n                yLabel=\"Event Type\"\r\n                brush={false} />\r\n        <SingleLineChart  \r\n          data={this.state.opsData} \r\n          width={1000} \r\n          height={200}\r\n                syncID=\"anyID\"\r\n                xDataKey=\"time\"\r\n                yDataKey=\"ops\"\r\n                xLabel=\"time\"\r\n                yLabel=\"Ops/s\"\r\n                brush={true}/>\r\n        <SingleLineChart  \r\n          data={this.state.cpuData} \r\n          width={1000} \r\n          height={200}\r\n                syncID=\"anyID\"\r\n                xDataKey=\"time\"\r\n                yDataKey=\"cpu\"\r\n                xLabel=\"time\"\r\n                yLabel=\"cpu\"\r\n                brush={false}/>\r\n        <SingleLineChart  \r\n          data={this.state.latencyData} \r\n          width={1000} \r\n          height={200}\r\n                syncID=\"anyID\"\r\n                xDataKey=\"time\"\r\n                yDataKey=\"lat\"\r\n                xLabel=\"time\"\r\n                yLabel=\"latency\"\r\n                brush={false}/>\r\n        <SingleLineChart  \r\n          data={this.state.errorData} \r\n          width={1000} \r\n          height={200}\r\n                syncID=\"anyID\"\r\n                xDataKey=\"time\"\r\n                yDataKey=\"success\"\r\n                xLabel=\"time\"\r\n                yLabel=\"Success rate\"\r\n                brush={false}/>\r\n        <LineChart\r\n              width={600}\r\n              height={300}\r\n              //data={memory}\r\n              syncId=\"anyId\"\r\n              margin={{\r\n                top: 10, right: 30, left: 20, bottom: 20,\r\n              }}\r\n            >\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"time\">\r\n            <Label value=\"time\" position=\"bottom\"/>\r\n          </XAxis>\r\n              <YAxis/>\r\n              <Tooltip />\r\n          <Legend />\r\n          <Line data={mem_data_1} type=\"monotone\" dataKey=\"memory\" stroke=\"#8884d8\" activeDot={{r: 8}}/>\r\n              <Line data = {mem_data_2} type=\"monotone\" dataKey=\"memory\" stroke=\"#82ca9d\" />\r\n            </LineChart>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MetricPlots\r\n\r\n/*\r\n<LineChart\r\n          width={500}\r\n          height={200}\r\n          data={ops}\r\n          syncId=\"anyId\"\r\n          margin={{\r\n            top: 10, right: 30, left: 20, bottom: 20,\r\n          }}\r\n        >\r\n\t\t  <Brush />\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"time\">\r\n\t\t\t  <Label value=\"time\" position=\"bottom\"/>\r\n\t\t  </XAxis>\r\n          <YAxis dataKey=\"ops\" label={{ value: 'Ops/s', angle: -90, position: 'insideLeft' }}/>\r\n          <Tooltip />\r\n          <Line type=\"monotone\" dataKey=\"ops\" stroke=\"#8884d8\" fill=\"#8884d8\" />\r\n\t\t</LineChart>\r\n\t\t<LineChart\r\n          width={500}\r\n          height={200}\r\n          data={cpu}\r\n          syncId=\"anyId\"\r\n          margin={{\r\n            top: 10, right: 30, left: 20, bottom: 20,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"time\">\r\n\t\t\t  <Label value=\"time\" position=\"bottom\"/>\r\n\t\t  </XAxis>\r\n          <YAxis dataKey=\"cpu\" label={{ value: 'cpu', angle: -90, position: 'insideLeft' }}/>\r\n          <Tooltip />\r\n          <Line type=\"monotone\" dataKey=\"cpu\" stroke=\"#82ca9d\" fill=\"#82ca9d\" />\r\n        </LineChart>\r\n        <AreaChart\r\n          width={500}\r\n          height={200}\r\n          data={latency}\r\n          syncId=\"anyId\"\r\n          margin={{\r\n            top: 10, right: 30, left: 20, bottom: 20,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"time\">\r\n\t\t\t  <Label value=\"time\" position=\"bottom\"/>\r\n\t\t  </XAxis>\r\n          <YAxis dataKey=\"lat\" label={{ value: 'Latency in various quantiles', angle: -90, position: 'insideLeft' }}/>\r\n          <Tooltip />\r\n          <Area type=\"monotone\" dataKey=\"lat\" stroke=\"#82ca9d\" fill=\"#82ca9d\" />\r\n\t\t</AreaChart>\r\n\t\t\r\n\t\t<LineChart\r\n          width={500}\r\n          height={200}\r\n          data={error}\r\n          syncId=\"anyId\"\r\n          margin={{\r\n            top: 10, right: 30, left: 20, bottom: 20,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"time\">\r\n\t\t\t  <Label value=\"time\" position=\"bottom\"/>\r\n\t\t  </XAxis>\r\n          <YAxis dataKey=\"success\" label={{ value: 'Success rate', angle: -90, position: 'insideLeft' }}/>\r\n          <Tooltip />\r\n          <Line type=\"monotone\" dataKey=\"success\" stroke=\"#8884d8\" fill=\"#8884d8\" />\r\n        </LineChart>\r\n\t\t<LineChart\r\n          width={500}\r\n          height={200}\r\n          data={memory}\r\n          syncId=\"anyId\"\r\n          margin={{\r\n            top: 10, right: 30, left: 20, bottom: 20,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"time\">\r\n\t\t\t  <Label value=\"time\" position=\"bottom\"/>\r\n\t\t  </XAxis>\r\n          <YAxis dataKey=\"memory\" label={{ value: 'memory', angle: -90, position: 'insideLeft' }}/>\r\n          <Tooltip />\r\n          <Line type=\"monotone\" dataKey=\"memory\" stroke=\"#8884d8\" fill=\"#8884d8\" />\r\n\t\t</LineChart>\r\n\t\t\r\n\r\n\t\t<SingleLineChart  \r\n\t\t\tdata={memory} \r\n\t\t\twidth={500} \r\n\t\t\theight={200}\r\n            syncID=\"anyID\"\r\n            xDataKey=\"time\"\r\n            yDataKey=\"memory\"\r\n            xLabel=\"time\"\r\n            yLabel=\"memory\"\r\n            brush={false}/>\r\n\t\t*/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport MetricPlots from './Metrics.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nReactDOM.render(\n  <MetricPlots />, document.getElementById('rechart')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}