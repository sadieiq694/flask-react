{"version":3,"sources":["components/DisplayNodeNames.js","components/ForceGraphClass.js","components/CheckboxPractice.js","components/rechart-components/EventGraph.js","components/rechart-components/CPUGraph.js","components/rechart-components/LatencyGraph.js","components/rechart-components/ErrorGraph.js","components/rechart-components/MemGraph.js","components/rechart-components/OpsGraph.js","components/D3-components/D3Bar.js","components/rechart-components/ReChartLine.js","App.js","reportWebVitals.js","index.js"],"names":["DisplayNodeNames","props","state","value","handleChange","bind","handleSubmit","event","this","setState","target","alert","preventDefault","listItems","nodeData","filter","item","group","map","node","name","onSubmit","type","onChange","React","Component","imgScale","d3","domain","range","edgeColorScale","ForceGraphClass","createGraph","width","links","d","Object","assign","nodes","drag","simulation","subject","find","x","y","on","active","alphaTarget","restart","fx","fy","force","id","strength","svg","attr","link","append","style","selectAll","data","join","text","enter","call","img","legend_g","i","legend_g2","source","destroy","stop","remove","console","log","CheckboxPractice","options","e","index","checked","push","indexOf","splice","edges","linksData","top_resources","serv_resources","filtered_nodes","includes","verts","a","filtered_edges","height","createClassFromLiteSpec","BarChart","uv","pv","amt","Example","syncId","margin","top","right","left","bottom","strokeDasharray","dataKey","stroke","fill","PureComponent","jsfiddleUrl","App","window","graphData","newData","replace","JSON","parse","graph","require","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"js/main.f886e55d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass DisplayNodeNames extends React.Component{\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {value: ''};\r\n    \r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this); \r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({value: event.target.value});\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        alert(\"A name was submitted: \" + this.state.value);\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        var nodes = this.props.nodeData; \r\n        //var edges = this.props.linksData;\r\n        //console.log(\"CONSOLE LOG DISPLAY: \", nodes)\r\n\r\n        // filter nodes whose group matches the current state\r\n        var filtered_nodes = nodes.filter( item => {\r\n            return item.group == this.state.value\r\n            });\r\n        //console.log(\"NODES:\", misDataFiltered2)\r\n        const listItems = filtered_nodes.map((node) => <li>{node.name}</li>);\r\n\r\n\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Name:\r\n                        <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\r\n                    </label>\r\n                    <input type=\"submit\" value=\"Submit\" />\r\n                </form>\r\n                <h1>Current state: {this.state.value}</h1>\r\n                <h1>NODE LIST</h1>\r\n                <ul>{listItems}</ul>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n    \r\n    export default DisplayNodeNames\r\n","import * as d3 from \"d3\";\r\nimport React from 'react'\r\n//import \"@fortawesome/fontawesome-free/css/all.min.css\";\r\n//import styles from \"./forceGraph.module.css\";\r\n\r\n\r\nconst imgScale = d3.scaleOrdinal() //=d3.scaleOrdinal(d3.schemeSet2)\r\n    .domain([\"node\", \"container\", \"pod\", \"service\", \"deployment\"])\r\n    .range(['https://cdn2.iconfinder.com/data/icons/mixd/512/21_kubernetes-512.png', 'https://cdn4.iconfinder.com/data/icons/vectory-symbols/40/hexagon-512.png', 'https://image.flaticon.com/icons/svg/73/73326.svg','https://static.thenounproject.com/png/32460-200.png', 'https://cdn1.iconfinder.com/data/icons/materia-arrows-symbols-vol-9/24/018_343_insignia_badge_shape_triangle-512.png'])\r\n\r\nconst edgeColorScale = d3.scaleOrdinal() //=d3.scaleOrdinal(d3.schemeSet2)\r\n    .domain([\"scheduled on\", \"runs\", \"references\", \"targets\", \"calls\", \"owns\", \"backs\", \"points to\"])\r\n    .range(['red', 'black', 'blue','pink','green','brown','yellow','orange'])\r\n\r\nclass ForceGraphClass extends React.Component{\r\n    componentDidMount(){\r\n        this.createGraph();\r\n    }\r\n    componentDidUpdate(){\r\n        //d3.selectAll(\"image\").remove()\r\n        //d3.selectAll(\"text\").remove()\r\n        //d3.selectAll(\"line\").remove()\r\n        var svg = d3.select('svg');\r\n        svg.selectAll(\"*\").remove();\r\n        this.createGraph(); \r\n    }\r\n\r\n    createGraph = ()=>{\r\n        const width = 1000;\r\n        const height = 400; \r\n        var links = this.props.links.map((d) => Object.assign({}, d));\r\n        var nodes = this.props.nodes.map((d) => Object.assign({}, d));\r\n\r\n\r\n        const drag = (simulation) => {\r\n            function dragsubject(event) {\r\n              return simulation.find(event.x, event.y);\r\n            }\r\n          \r\n            const dragstarted = (d) => {\r\n              if (!d.active) simulation.alphaTarget(0.3).restart();\r\n              d.subject.fx = d.subject.x;\r\n              d.subject.fy = d.subject.y;\r\n            }\r\n            \r\n            const dragged = (d) => {\r\n              d.subject.fx = d.x;\r\n              d.subject.fy = d.y;\r\n            }\r\n            \r\n            const dragended = (d) => {\r\n              if (!d.active) simulation.alphaTarget(0);\r\n              d.subject.fx = null;\r\n              d.subject.fy = null;\r\n            }\r\n            \r\n            return d3.drag()\r\n                .subject(dragsubject)\r\n                .on(\"start\", dragstarted)\r\n                .on(\"drag\", dragged)\r\n                .on(\"end\", dragended);\r\n          }\r\n\r\n        const simulation = d3\r\n            .forceSimulation(nodes)\r\n            .force(\"link\", d3.forceLink(links).id(d => d.id))\r\n            .force(\"charge\", d3.forceManyBody().strength(-200))\r\n            .force(\"x\", d3.forceX())\r\n            .force(\"y\", d3.forceY());\r\n\r\n\r\n        var svg = d3\r\n            .select('svg')\r\n            //.append(\"svg\")\r\n            .attr(\"viewBox\", [-width/2, -height/2, width, height]);\r\n\r\n        const def = svg.append('defs').append('marker')\r\n            .attr(\"id\",'arrowhead')\r\n            .attr('viewBox','-0 -5 10 10') //the bound of the SVG viewport for the current SVG fragment. defines a coordinate system 10 wide and 10 high starting on (0,-5)\r\n            .attr('refX',23) // x coordinate for the reference point of the marker. If circle is bigger, this need to be bigger.\r\n            .attr('refY',0)\r\n            .attr('orient','auto')\r\n            .attr('markerWidth', 4)\r\n            .attr('markerHeight', 4)\r\n            .attr('xoverflow','visible')\r\n            .append('svg:path')\r\n            .attr('d', 'M 0,-5 L 10 ,0 L 0,5')\r\n            .attr('fill', 'black')\r\n            .style('stroke','none');\r\n\r\n        const link = svg\r\n            .append(\"g\")\r\n            .attr(\"stroke\", \"#999\")\r\n            .attr(\"stroke-opacity\", 0.6)\r\n            .selectAll(\"line\")\r\n            .data(links)\r\n            .join(\"line\")\r\n            .style(\"stroke\", d => edgeColorScale(d.type))\r\n            .attr(\"stroke-width\",3)\r\n            .attr('marker-end','url(#arrowhead)');\r\n        \r\n        const text = svg.append(\"g\") // deleting this gets rid of images \r\n            .attr(\"class\", \"text\")\r\n            .selectAll(\"text\")\r\n            .data(nodes)\r\n            .enter().append(\"text\")\r\n            .attr(\"font-family\", \"sans-serif\")\r\n            .attr(\"font-size\", 15)\r\n            .text(d => d.name)\r\n            .call(drag(simulation));;\r\n\r\n        const img = svg.append(\"g\")\r\n            .attr(\"class\", \"image\")\r\n            .selectAll(\"image\")\r\n            .data(nodes)\r\n            .enter().append(\"image\")\r\n            .attr(\"xlink:href\",d => imgScale(d.group) )\r\n            .attr(\"width\", 30)\r\n            .attr(\"height\", 30)\r\n            //.on(\"click\", clickNode)\r\n            .call(drag(simulation));\r\n\r\n          const legend_g = svg.selectAll(\".legend\")\r\n              .data(imgScale.domain())\r\n              .enter().append(\"g\") \r\n              .attr(\"transform\", (d, i) => `translate(${width-650},${ -50 + i * 25})`); \r\n        \r\n          legend_g.append(\"image\")\r\n              .attr(\"xlink:href\",imgScale )\r\n              .attr(\"width\", 20)\r\n              .attr(\"height\", 20);\r\n        \r\n          legend_g.append(\"text\")\r\n              .attr(\"x\", 25)\r\n              .attr(\"y\", 20)\r\n              .text(d => d);\r\n          \r\n          const legend_g2 = svg.selectAll(\".legend\")\r\n              .data(edgeColorScale.domain())\r\n              .enter().append(\"g\") \r\n              .attr(\"transform\", (d, i) => `translate(${width-640},${100+ i * 20})`); \r\n        \r\n          legend_g2.append(\"circle\")\r\n              .attr(\"cx\", 0)\r\n              .attr(\"cy\", 0)\r\n              .attr(\"r\", 5)\r\n              .attr(\"fill\", edgeColorScale);\r\n            \r\n          legend_g2.append(\"text\")\r\n              .attr(\"x\", 10)\r\n              .attr(\"y\", 5)\r\n              .text(d => d);\r\n\r\n        simulation.on(\"tick\", () => {\r\n            //update link positions\r\n            link\r\n                .attr(\"x1\", d => d.source.x)\r\n                .attr(\"y1\", d => d.source.y)\r\n                .attr(\"x2\", d => d.target.x)\r\n                .attr(\"y2\", d => d.target.y);\r\n        \r\n            img\r\n                .attr(\"x\", d => d.x-15) //position of the lower left point of the text\r\n                .attr(\"y\", d => d.y-15); //position of the lower left point of the text\r\n            text\r\n                .attr(\"x\", d => d.x + 15) //position of the lower left point of the text\r\n                .attr(\"y\", d => d.y + 5); //position of the lower left point of the text\r\n\r\n            });\r\n        \r\n\r\n        return {\r\n            destroy: () => {\r\n                //d3.select(svg).remove()\r\n                //link.exit().remove()\r\n                //img.exit().remove();\r\n                simulation.stop();\r\n            },\r\n            nodes: () => {\r\n                return svg.node();\r\n            }\r\n        };\r\n \r\n    }\r\n\r\n    \r\n\r\n    render(){\r\n        console.log(this.props.data)\r\n        return(\r\n            <svg>\r\n\r\n            </svg>\r\n        );\r\n    }\r\n\r\n} \r\n\r\nexport default ForceGraphClass\r\n\r\n/*\r\nrunForceGraph(\r\n  container,\r\n  linksData,\r\n  nodeData,\r\n) {\r\n  console.log(\"IN GRAPHGENERATOR\", nodeData)\r\n  const links = linksData.map((d) => Object.assign({}, d));\r\n  const nodes = nodeData.map((d) => Object.assign({}, d));\r\n\r\n  const containerRect = container.getBoundingClientRect();\r\n  const height = containerRect.height;\r\n  const width = containerRect.width;\r\n\r\n  const color = () => { return \"#9D79A0\"; };\r\n\r\n\r\n\r\n\r\n  const link = svg\r\n    .append(\"g\")\r\n    .attr(\"stroke\", \"#999\")\r\n    .attr(\"stroke-opacity\", 0.6)\r\n    .selectAll(\"line\")\r\n    .data(links)\r\n    .join(\"line\")\r\n    .style(\"stroke\", d => edgeColorScale(d.type))\r\n    .attr(\"stroke-width\",3)\r\n    .attr('marker-end','url(#arrowhead)');\r\n    \r\n  const node = svg.append(\"g\")\r\n    .attr(\"stroke\", \"#fff\")\r\n    .attr(\"stroke-width\", 1.5)\r\n    .selectAll(\"circle\")\r\n    .data(nodes)\r\n    .join(\"circle\")\r\n    .attr(\"r\",5)\r\n    // .style(\"fill\", d => colorScale(d.group))\r\n    .style(\"fill\", \"#ffffff\");\r\n\r\n  const img = svg.append(\"g\")\r\n    .attr(\"class\", \"image\")\r\n    .selectAll(\"image\")\r\n    .data(nodes)\r\n    .enter().append(\"image\")\r\n    .attr(\"xlink:href\",d => imgScale(d.group) )\r\n    .attr(\"width\", 30)\r\n    .attr(\"height\", 30)\r\n    //.on(\"click\", clickNode)\r\n    .call(drag(simulation));\r\n\r\n  /*const label = svg.append(\"g\")\r\n    .attr(\"class\", \"labels\")\r\n    .selectAll(\"text\")\r\n    .data(nodes)\r\n    .enter()\r\n    .append(\"text\")\r\n    .attr('text-anchor', 'middle')\r\n    .attr('dominant-baseline', 'central')\r\n    .attr(\"class\", d => `fa ${getClass(d)}`)\r\n    .text(d => {return icon(d);})\r\n    .call(drag(simulation));\r\n\r\n  const text = svg.append(\"g\") // deleting this gets rid of images \r\n    .attr(\"class\", \"text\")\r\n    .selectAll(\"text\")\r\n    .data(nodes)\r\n    .enter().append(\"text\")\r\n    .attr(\"font-family\", \"sans-serif\")\r\n    .attr(\"font-size\", 15)\r\n    .text(d => d.name)\r\n    .call(drag(simulation));;\r\n\r\n\r\n  label.on(\"mouseover\", (d) => {\r\n    addTooltip(nodeHoverTooltip, d, d3.event.pageX, d3.event.pageY);\r\n  })\r\n    .on(\"mouseout\", () => {\r\n      removeTooltip();\r\n    });\r\n\r\n  simulation.on(\"tick\", () => {\r\n    //update link positions\r\n    link\r\n      .attr(\"x1\", d => d.source.x)\r\n      .attr(\"y1\", d => d.source.y)\r\n      .attr(\"x2\", d => d.target.x)\r\n      .attr(\"y2\", d => d.target.y);\r\n\r\n    // update node positions\r\n    node\r\n      .attr(\"cx\", d => d.x)\r\n      .attr(\"cy\", d => d.y);\r\n    img\r\n      .attr(\"x\", d => d.x-15) //position of the lower left point of the text\r\n      .attr(\"y\", d => d.y-15); //position of the lower left point of the text\r\n\r\n    text\r\n      .attr(\"x\", d => d.x + 15) //position of the lower left point of the text\r\n      .attr(\"y\", d => d.y + 5); //position of the lower left point of the text\r\n  });\r\n\r\n  const legend_g = svg.selectAll(\".legend\")\r\n    .data(imgScale.domain())\r\n    .enter().append(\"g\") \r\n    .attr(\"transform\", (d, i) => `translate(${width-600},${ -50 + i * 25})`); \r\n\r\n  legend_g.append(\"image\")\r\n        .attr(\"xlink:href\",imgScale )\r\n        .attr(\"width\", 20)\r\n      .attr(\"height\", 20);\r\n\r\n  legend_g.append(\"text\")\r\n    .attr(\"x\", 25)\r\n    .attr(\"y\", 20)\r\n    .text(d => d);\r\n  \r\n  const legend_g2 = svg.selectAll(\".legend\")\r\n    .data(edgeColorScale.domain())\r\n    .enter().append(\"g\") \r\n    .attr(\"transform\", (d, i) => `translate(${width-590},${100+ i * 20})`); \r\n\r\n  legend_g2.append(\"circle\")\r\n    .attr(\"cx\", 0)\r\n    .attr(\"cy\", 0)\r\n    .attr(\"r\", 5)\r\n    .attr(\"fill\", edgeColorScale);\r\n    \r\n  legend_g2.append(\"text\")\r\n    .attr(\"x\", 10)\r\n    .attr(\"y\", 5)\r\n    .text(d => d);\r\n\r\n  return {\r\n    destroy: () => {\r\n      simulation.stop();\r\n    },\r\n    nodes: () => {\r\n      return svg.node();\r\n    }\r\n  };\r\n}\r\n*/","import React from 'react'\r\n//import { ForceGraph } from \"./ForceGraph.js\";\r\nimport ForceGraphClass from \"./ForceGraphClass.js\"\r\n\r\n\r\nclass CheckboxPractice extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        options: []\r\n      };\r\n      \r\n      this.onChange = this.onChange.bind(this)\r\n  \r\n      //this.handleInputChange = this.handleInputChange.bind(this);\r\n    };\r\n\r\n    onChange(e) {\r\n        // current array of options\r\n        const options = this.state.options\r\n        let index\r\n    \r\n        // check if the check box is checked or unchecked\r\n        if (e.target.checked) {\r\n          // add the numerical value of the checkbox to options array\r\n          console.log(e.target.value, typeof(e.target.value))\r\n          options.push(e.target.value)\r\n        } else {\r\n          // or remove the value from the unchecked checkbox from the array\r\n          index = options.indexOf(e.target.value)\r\n          options.splice(index, 1)\r\n        }\r\n    \r\n        // update the state with the new array of options\r\n        this.setState({ options: options })\r\n      }\r\n\r\n    render() {\r\n        var nodes = this.props.nodeData;\r\n        var edges = this.props.linksData;\r\n        console.log(\"Edge example:\", edges[0])\r\n        var top_resources = [\"pod\", \"node\", \"container\"]\r\n        var serv_resources = [\"deployment\", \"pod\", \"service\"]\r\n        //console.log(\"One node:\", nodes[1])\r\n        var filtered_nodes = nodes.filter( item => { \r\n            return ( ((this.state.options.includes(item['group']) || \r\n            this.state.options.includes('all'))) || \r\n            (this.state.options.includes('topology') && top_resources.includes(item['group']) ) || \r\n            (this.state.options.includes('call graph') && serv_resources.includes(item['group']) ))\r\n            });\r\n\r\n        var verts = filtered_nodes.map(a => a.id);\r\n\r\n        var filtered_edges = edges.filter( item => {\r\n            return (verts.includes(item['source']) && verts.includes(item['target']))\r\n        })\r\n        console.log(\"filtered nodes\", filtered_nodes, \"filtered edges\", filtered_edges )\r\n        var listItems = filtered_nodes.map((node) => <li>{node.name}</li>);\r\n\r\n      //console.log(this.state.options)\r\n      return (\r\n        <div>\r\n        <form>\r\n          <label>\r\n            Pods: <input name=\"pods\" type=\"checkbox\" value=\"pod\" onChange={this.onChange} />\r\n          </label>\r\n          <br />\r\n          <label>\r\n            Nodes: <input name=\"nodes\" type=\"checkbox\" value=\"node\" onChange={this.onChange} />\r\n          </label>\r\n          <br />\r\n          <label>\r\n            Containers: <input name=\"containers\" type=\"checkbox\" value=\"container\" onChange={this.onChange} />\r\n          </label>\r\n          <br />\r\n          <label>\r\n            Services: <input name=\"services\" type=\"checkbox\" value=\"service\" onChange={this.onChange} />\r\n          </label>\r\n          <br />\r\n          <label>\r\n            Deployments: <input name=\"deployments\" type=\"checkbox\" value=\"deployment\" onChange={this.onChange} />\r\n          </label>\r\n        </form>\r\n        <ForceGraphClass height={500} width={500} links={filtered_edges} nodes={filtered_nodes}/> \r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  //        <ForceGraph linksData={filtered_edges} nodesData={filtered_nodes}/>\r\n\r\n\r\nexport default CheckboxPractice","import {createClassFromLiteSpec} from 'react-vega-lite';\r\n\r\n\r\nexport default createClassFromLiteSpec('EventGraph', {\r\n    \"description\": \"A simple line chart with embedded data.\",\r\n    \"mark\": {\r\n        \"type\": \"circle\"\r\n    },\r\n    \"encoding\": {\r\n      \"x\": {\"field\": \"time\", \"type\": \"temporal\"},\r\n      \"y\": {\"field\": \"reason\", \"type\": \"ordinal\"},\r\n      \"size\": {\"field\":\"importance\"},\r\n      \"color\": {\"field\": \"object-type\", \"type\":\"nominal\"}\r\n    }\r\n  });","import React, {Component} from 'react'\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Legend} from 'recharts';\r\n//import { renderModule } from 'vega';\r\n\r\nclass ReChartLine extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    /*this.state = {\r\n      options: []\r\n    };\r\n    \r\n    this.onChange = this.onChange.bind(this)\r\n    */\r\n    //this.handleInputChange = this.handleInputChange.bind(this);\r\n  };\r\n\r\n  render() {  \r\n      return(\r\n      <LineChart width={600} height={300} data={this.props.data}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"time\" interval=\"preserveEnd\" />\r\n          <YAxis dataKey=\"cpu\" />\r\n          <Legend />\r\n          <Line type=\"monotone\" dataKey=\"cpu\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\r\n      </LineChart>\r\n      );\r\n  }\r\n}\r\n\r\n//  <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\r\n\r\n\r\nexport default ReChartLine;\r\n\r\n  /*\r\n\r\n\r\n/*\r\nconst selectlegend = vl.selectMulti().fields(\"resource_id\").bind(\"legend\")\r\n  console.log(xmin,xmax)\r\n  return vl.markLine({size:4},{interpolate:\"linear\"})\r\n    .width(700)\r\n    .data(filtered_cpu_data)\r\n    .select(selectlegend)\r\n    .encode(\r\n      vl.y().fieldQ(\"cpu\"),\r\n      vl.x().fieldT(\"time\").scale({domain:[xmin, xmax]}),\r\n      vl.color().value(\"white\").if(selectlegend,vl.color().fieldN(\"resource_id\")),\r\n      vl.opacity().value(\".5\").if(selectlegend,vl.opacity().value(\"1\")),\r\n     vl.tooltip(['resource_id','time','cpu']) \r\n\r\n      )*/","import {createClassFromLiteSpec} from 'react-vega-lite';\r\n\r\n\r\nexport default createClassFromLiteSpec('LatencyGraph', {\r\n    \"description\": \"A simple line chart with embedded data.\",\r\n    \"mark\": {\r\n        \"type\": \"line\"\r\n    },\r\n    \"encoding\": {\r\n      \"x\": {\"field\": \"time\", \"type\": \"temporal\"},\r\n      \"y\": {\"field\": \"lat\", \"type\": \"quantitative\"},\r\n      \"color\": {\"field\": \"quantile\", \"type\":\"nominal\"}\r\n    }\r\n  });\r\n","import {createClassFromLiteSpec} from 'react-vega-lite';\r\n\r\n\r\nexport default createClassFromLiteSpec('ErrorGraph', {\r\n    \"description\": \"A simple line chart with embedded data.\",\r\n    \"mark\": {\r\n        \"type\": \"line\"\r\n    },\r\n    \"encoding\": {\r\n      \"x\": {\"field\": \"time\", \"type\": \"temporal\"},\r\n      \"y\": {\"field\": \"success\", \"type\": \"quantitative\"},\r\n      \"color\": {\"field\": \"resource_id\", \"type\":\"nominal\"}\r\n    }\r\n  });","//import React, { PropTypes } from 'react';\r\nimport {createClassFromLiteSpec} from 'react-vega-lite';\r\n\r\n\r\nexport default createClassFromLiteSpec('MemGraph', {\r\n    \"description\": \"A simple line chart with embedded data.\",\r\n    \"mark\": {\r\n        \"type\": \"line\"\r\n    },\r\n    \"encoding\": {\r\n      \"x\": {\"field\": \"time\", \"type\": \"temporal\"},\r\n      \"y\": {\"field\": \"memory\", \"type\": \"quantitative\"},\r\n      \"color\": {\"field\": \"resource_id\", \"type\":\"nominal\"}\r\n    }\r\n  });","import {createClassFromLiteSpec} from 'react-vega-lite';\r\n\r\n\r\nexport default createClassFromLiteSpec('OpsGraph', {\r\n    \"description\": \"A simple line chart with embedded data.\",\r\n    \"mark\": {\r\n        \"type\": \"line\"\r\n    },\r\n    \"encoding\": {\r\n      \"x\": {\"field\": \"time\", \"type\": \"temporal\"},\r\n      \"y\": {\"field\": \"ops\", \"type\": \"quantitative\"},\r\n      \"color\": {\"field\": \"resource_id\", \"type\":\"nominal\"}\r\n    }\r\n  });\r\n","// BarChart.js\r\nimport * as d3 from 'd3';\r\nimport React, { useRef, useEffect } from 'react';\r\n\r\nfunction BarChart({ width, height, data }){\r\n    const ref = useRef();\r\n\r\n    useEffect(() => {\r\n        const svg = d3.select(ref.current)\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height)\r\n            .style(\"border\", \"1px solid black\")\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        draw();\r\n    }, [data]);\r\n\r\n    const draw = () => {\r\n        \r\n        const svg = d3.select(ref.current);\r\n        var selection = svg.selectAll(\"rect\").data(data);\r\n        var yScale = d3.scaleLinear()\r\n                            .domain([0, d3.max(data)])\r\n                            .range([0, height-100]);\r\n        \r\n        selection\r\n            .transition().duration(300)\r\n                .attr(\"height\", (d) => yScale(d))\r\n                .attr(\"y\", (d) => height - yScale(d))\r\n\r\n        selection\r\n            .enter()\r\n            .append(\"rect\")\r\n            .attr(\"x\", (d, i) => i * 45)\r\n            .attr(\"y\", (d) => height)\r\n            .attr(\"width\", 40)\r\n            .attr(\"height\", 0)\r\n            .attr(\"fill\", \"orange\")\r\n            .transition().duration(300)\r\n                .attr(\"height\", (d) => yScale(d))\r\n                .attr(\"y\", (d) => height - yScale(d))\r\n        \r\n        selection\r\n            .exit()\r\n            .transition().duration(300)\r\n                .attr(\"y\", (d) => height)\r\n                .attr(\"height\", 0)\r\n            .remove()\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"chart\">\r\n            <svg ref={ref}>\r\n            </svg>\r\n        </div>\r\n        \r\n    )\r\n\r\n}\r\n\r\nexport default BarChart;","import React, { PureComponent } from 'react';\r\nimport {\r\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Brush,\r\n  AreaChart, Area,\r\n} from 'recharts';\r\n\r\nconst data = [\r\n  {\r\n    name: 'Page A', uv: 4000, pv: 2400, amt: 2400,\r\n  },\r\n  {\r\n    name: 'Page B', uv: 3000, pv: 1398, amt: 2210,\r\n  },\r\n  {\r\n    name: 'Page C', uv: 2000, pv: 9800, amt: 2290,\r\n  },\r\n  {\r\n    name: 'Page D', uv: 2780, pv: 3908, amt: 2000,\r\n  },\r\n  {\r\n    name: 'Page E', uv: 1890, pv: 4800, amt: 2181,\r\n  },\r\n  {\r\n    name: 'Page F', uv: 2390, pv: 3800, amt: 2500,\r\n  },\r\n  {\r\n    name: 'Page G', uv: 3490, pv: 4300, amt: 2100,\r\n  },\r\n];\r\n\r\nclass Example extends PureComponent {\r\n  static jsfiddleUrl = 'https://jsfiddle.net/alidingling/nskpgcrz/';\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4>A demo of synchronized AreaCharts</h4>\r\n        <LineChart\r\n          width={500}\r\n          height={200}\r\n          data={data}\r\n          syncId=\"anyId\"\r\n          margin={{\r\n            top: 10, right: 30, left: 0, bottom: 0,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" fill=\"#8884d8\" />\r\n        </LineChart>\r\n        <LineChart\r\n          width={500}\r\n          height={200}\r\n          data={data}\r\n          syncId=\"anyId\"\r\n          margin={{\r\n            top: 10, right: 30, left: 0, bottom: 0,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#82ca9d\" fill=\"#82ca9d\" />\r\n          <Brush />\r\n        </LineChart>\r\n        <AreaChart\r\n          width={500}\r\n          height={200}\r\n          data={data}\r\n          syncId=\"anyId\"\r\n          margin={{\r\n            top: 10, right: 30, left: 0, bottom: 0,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Area type=\"monotone\" dataKey=\"pv\" stroke=\"#82ca9d\" fill=\"#82ca9d\" />\r\n        </AreaChart>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Example","import React from 'react';\nimport DisplayNodeNames from './components/DisplayNodeNames.js'\n//import { ForceGraph } from \"./components/ForceGraph.js\";\nimport CheckboxPractice from \"./components/CheckboxPractice.js\"\nimport EventGraph from \"./components/rechart-components/EventGraph.js\"\nimport CPUGraph from './components/rechart-components/CPUGraph.js';\nimport LatencyGraph from './components/rechart-components/LatencyGraph.js'\nimport ErrorGraph from './components/rechart-components/ErrorGraph.js'\nimport MemGraph from './components/rechart-components/MemGraph.js'\nimport OpsGraph from './components/rechart-components/OpsGraph.js'\nimport D3Bar from './components/D3-components/D3Bar.js'\nimport Example from './components/rechart-components/ReChartLine.js'\n\n\nfunction App() {\n  var data = window.graphData\n  //console.log(\"CONSOLE LOG APP: \", data)\n  var newData = data.replace(/&#34;/g, '\"')\n  //console.log(\"CONSOLE LOG APP: \", newData, typeof(newData))\n  data = JSON.parse(newData);\n\n  var nodes = data.graph.nodes\n  var edges = data.graph.edges; \n\n  /*\n  var cpu = data.cpu;\n  console.log(\"CPU: \", cpu);\n  var events = data.event;\n  console.log(\"events: \", events);\n\n  var error = data.error;\n  var latency = data.latency;\n  var memory = data.memory; \n  var ops = data.ops;*/\n\n  var cpu = require('./smallData/cpu_small.json')\n  var ops = require('./smallData/ops_small.json')\n  var latency = require('./smallData/latency_small.json')\n  var events = require('./smallData/events_small.json')\n  var error = require('./smallData/err_small.json')\n  var memory = require('./smallData/memory_small.json')\n  // these are all lists of objects\n\n  const barData = [\n    [10, 30, 40, 20],\n    [10, 40, 30, 20, 50, 10],\n    [60, 30, 40, 20, 30]\n  ]\n\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <DisplayNodeNames nodeData={nodes}/>\n        <CheckboxPractice nodeData={nodes} linksData={edges}/>\n      </header>\n    </div>\n  );\n}\n\n//         <Example />\n\n\n/*\n  <CPUGraph data={cpu} />\n  <MemGraph data={memory} />\n  <ErrorGraph data={error} />\n  <LatencyGraph data={latency} />\n  <OpsGraph data={ops} />\n  <EventGraph data={events} />\n*/\n\n//         <p>My token: {window.token}</p>\n//         <ForceGraph linksData={edges} nodesData={nodes}/>\n//         <EventGraph data={eventData} />\n//         <D3Bar width={500} height={500} data={barData}/>\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Example from './components/rechart-components/ReChartLine.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nReactDOM.render(\n  <Example />, document.getElementById('rechart')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}